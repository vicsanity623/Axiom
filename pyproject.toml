[build-system]
requires = ["setuptools >= 77"]
build-backend = "setuptools.build_meta"

[project]
name = "axiom_server"
dynamic = ["version"]
authors = [
  { name="Vic", email="victronevarez88@gmail.com" },
]
description = "Decentralized AI network that autonomously discovers, verifies, and archives objective truth"
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Internet",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
keywords = [
    "ai", "p2p", "truth", "blockchain"
]

dependencies = [
    # --- Core Web & Networking ---
    "Flask==3.0.3",
    "flask-cors",
    "gunicorn==22.0.0",
    "requests==2.31.0",

    # --- Database & Blockchain ---
    "sqlalchemy",
    "cryptography>=45.0.6",
    "pip>=25.2",

    # --- Data & Validation ---
    "pydantic",
    "PyQt6",
    "beautifulsoup4>=4.12.3",
    "transformers",
    "scipy",
    "numpy<2",
    "feedparser==6.0.11",
    "ddgs",
    "sec_edgar_api",

    # --- AI & Natural Language Processing ---
    "spacy>=3.7.0,<3.8.0",
    "typing-extensions>=4.14.1",
    "langdetect",
    
    # --- Neural Network & Machine Learning ---
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    
    # --- Additional NLP & AI ---
    "sentence-transformers>=2.2.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "cohere>=4.0.0",
    "huggingface-hub>=0.16.0",
]



[tool.setuptools.dynamic]
version = {attr = "axiom_server.node.__version__"}

[project.urls]
"Source" = "https://github.com/ArtisticIntentionz/AxiomEngine"
"Bug Tracker" = "https://github.com/ArtisticIntentionz/AxiomEngine/issues"

[project.optional-dependencies]
client = ["pyqt6>=6.9.1"]
tests = [
    "pytest>=5.0",
    "pytest-cov>=6.0.0",
    "coverage>=7.2.5",
    "uv>=0.5.21",
]
tools = [
    "ruff>=0.9.2",
    "mypy>=1.17.1",
    "pre-commit>=4.2.0",
    "attrs>=25.3.0",
    "types-requests>=2.32.4.20250611",
    "lxml",
    "ddgs",
]

[project.scripts]
axiom_server = "axiom_server.node:cli_run"

[project.gui-scripts]
axiom_client = "axiom_client.main:cli_run"

[tool.setuptools.package-data]
axiom_server = ["py.typed", "*.html"]
axiom_client = ["py.typed"]

[tool.uv]
package = true

[tool.mypy]
files = ["src/axiom_server/", "src/axiom_client/"]
enable_error_code = [
    "truthy-bool",
    "mutable-override",
    "exhaustive-match",
]
show_column_numbers = true
show_error_codes = true
show_traceback = true
disallow_any_decorated = true
disallow_any_unimported = true
ignore_missing_imports = true
local_partial_types = true
no_implicit_optional = true
strict = true
warn_unreachable = true

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff]
line-length = 79
fix = true

include = ["*.py", "*.pyi", "**/pyproject.toml"]

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "E",     # Error
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FLY",   # flynt
    "FURB",  # refurb
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "N",     # pep8-naming
    "PIE",   # flake8-pie
    "PT",    # flake8-pytest-style
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "R",     # Refactor
    "RET",   # flake8-return
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLOT",  # flake8-slots
    "TCH",   # flake8-type-checking
    "UP",    # pyupgrade
    "W",     # Warning
    "YTT",   # flake8-2020
]
extend-ignore = [
    "D203",   # one-blank-line-before-class
    "D204",   # one-blank-line-after-class
    "D211",   # no-blank-line-before-class
    "D213",   # multi-line-summary-second-line
    "D417",   # undocumented-param "Missing argument descriptions"
    "E501",   # line-too-long
    "PYI041", # redundant-numeric-union
    "S101",   # assert (use of assert for tests and type narrowing)
    "SIM117", # multiple-with-statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D100",  # undocumented-public-module
    "D103",  # undocumented-public-function
    "D107",  # undocumented-public-init
]

[tool.pytest.ini_options]
pythonpath = [
  "src"
]
testpaths = [
  "tests"
]

[tool.coverage.html]
show_contexts = true
skip_covered = false

[tool.coverage.paths]
source = ["src", "**/site-packages"]

[tool.coverage.run]
branch = true
omit = []
# The test suite spawns subprocesses to test some stuff, so make sure
# this doesn't corrupt the coverage files
parallel = true
plugins = []
relative_files = true
source = ["axiom_server"]

[tool.coverage.report]
precision = 1
skip_covered = true
skip_empty = true
show_missing = true
exclude_also = [
  '^\s*@pytest\.mark\.xfail',
   "abc.abstractmethod",
   "if TYPE_CHECKING.*:",
   "if _t.TYPE_CHECKING:",
   "if t.TYPE_CHECKING:",
   "@overload",
   'class .*\bProtocol\b.*\):',
   "raise NotImplementedError",
   '.*if "sphinx.ext.autodoc" in sys.modules:',
   'TODO: test this line',
   'if __name__ == "__main__":',
]
partial_branches = [
    "pragma: no branch",
    "if not TYPE_CHECKING:",
    "if not _t.TYPE_CHECKING:",
    "if not t.TYPE_CHECKING:",
    "if .* or not TYPE_CHECKING:",
    "if .* or not _t.TYPE_CHECKING:",
    "if .* or not t.TYPE_CHECKING:",
   'TODO: test this branch',
]
